openapi: 3.0.0
info:
  title: SWIFTRef API
  description: |
    One of SWIFT's latest delivery channels for SWIFTRef reference data are Application Programming Interfaces (APIs). APIs offer financial institutions, corporates and third party service providers an automated data look-up service for real-time identification and validation of critical payments reference data within the SWIFTRef utility.
    
    **v4.0.0 Release notes**

    * HTTP request header `Accept` now used for the customer expected format (JSON/XML):
      * it should only be `application/json` or `application/xml`;
      * if an unexpected accept header is received, an error 406 is returned. If not sent, the request is accepted and the default (JSON) will be applied.
    * Errors - all the V4 APIs return the error in the same format:
      * a collection, whose structure is `[ {errorObject1}, {errorObject2}, ... ]`;
      * `more_info` error attribute became optional.
    * All the APIs within the OpenAPI contract have the same version. The version corresponds to the major version of the OpenAPI contract (OpenAPI contract 4.0.0 only contain V4 APIs).
    * Session cookie removed.
    * Header `API-Status` (API verbose) removed.
    * Response customization (EOL, colons) removed:
      * JSON responses are not returned pretty-printed, but raw.
    * OpenAPI changes
      * standardizations as per Swagger HUB rules
      * RegExp validations for each input field added
      * output format constraints added
      * standardized V4 version for all the APIs
      * 8 new endpoints added:
        * Search for PMI participants: `GET /v4/pmis/participants`
        * Get PMI participant details: `GET /v4/pmis/participants/{participant_record_id}`
        * Get PMI structure: `GET /v4/pmis/{service_id}/structure`
        * Get PMI details: `GET /v4/pmis/{service_id}`
        * Search for PMI: `GET /v4/pmis`
        * Get Connected BIC: `GET /v4/bics/{bic}/connected_bic`
        * Get BBAN elements of an IBAN (IBAN constructor metadata): `GET /v4/bbans/elements`
        * IBAN constructor (build IBAN): `GET /v4/ibans`

      * 7 existing endpoints updated:
        * Get SSIs for a BIC: `GET /v4/bics/{bic}/connected_bic`
    
          For a given BIC and a given currency code, and optionally an asset category, you can retrieve the Standing Settlement Instructions (SSIs). One or more SSIs can be returned.

          The V4 is based on the SSI Plus V3 directory. The v1.6 was based on SSI Plus V2 directory. Because the structure of SSI Plus V3 differs from the SSI Plus V2, there are several changes in the parameters:

          * Some request parameters changed name:
            * `currency_code` changed to `iso_currency_code`
            * `ssi_category` changed to `asset_category`
          * The asset category covers now all asset categories listed in the SSI Plus V3 directory.
          * Many new response attributes

        * Check validity of an IBAN (SEPA-only option added): `GET /v4/ibans/{iban}/validity`
    
          You can check whether an IBAN is valid, that is its country code, structure, length, and checksum are valid. It also checks that the bank ID exists and that it is allowed for use in the IBANs. If the bank ID is not allowed, then it is listed in the Exclusion List. This list contains bank IDs that must not be used in IBANs.
    
          This validity call allows for very fast, low overhead checking of the validity of an IBAN. With the new optional request parameter `sepa_only`, you can validate a SEPA IBAN.

          * One new request parameter added: `sepa_only`
        * Get details for a BIC: `GET /v4/bics/{bic}`
          
          For a given BIC, you can retrieve the details of that BIC, that is the bank name or business name, and the address.
     
          The V4 features ISO 20022-compliant attributes (see https://www.swift.com/resource/structured-ordering-and-beneficiary-customer-data-payments-1).
        * Get details for a National ID: `GET /v4/national_ids/{national_id}`
    
          For a given National ID, you can retrieve the details of that National ID, that is the bank name or business name, and the address.
          You must provide either a country code, or an indication to which scheme the National ID belongs.
          
          You can also receive the National ID's data elements (such as the name and address in the local language instead of in English),
          if you add the URL extension `&only_local_language=true`.
          However, the local language elements are available only for a subset of all National IDs.
    
          The V4 features ISO 20022-compliant attributes (see https://www.swift.com/resource/structured-ordering-and-beneficiary-customer-data-payments-1); all available national ID schemes are now returned (id_type, national_id_type, iso_clc_type).
        * Validate National ID: `GET /v4/national_ids/{national_id}/validity`
    
          All available national ID schemes are available as input and returned to output (id_type, national_id_type, iso_clc_type).
        * Get BICs of a National ID: `GET /v4/national_ids/{national_id}/bics`
    
          All available national ID schemes are available as input (id_type, national_id_type, iso_clc_type).
        * Get National IDs of a BIC: `GET /v4/bics/{bic}/national_ids`
    
          All available national ID schemes are now returned (id_type, national_id_type, iso_clc_type); "AN" and "FN" type attribute, previously used to flag items as "Alternative National ID Type" or "Foreign National ID Type", are not returned anymore.
  version: 4.0.0
  contact:
    name: Standards & Developer Hub
    url: 'https://developer.swift.com'
    email: developer-support@swift.com
  license:
    name: API Restricted License
    url: 'https://www.swift.com/file/56776/download?token=8w8DC4eF'
servers:
  - url: 'https://api.swift.com/swiftrefdata/v4'
    description: Live environment
  - url: 'https://sandbox.swift.com/swiftrefdata/v4'
    description: Sandbox environment
  - url: 'https://api-test.swift.com/swiftrefdata/v4'
    description: Test environment
security:
  - oauthBearerToken: [ ]
paths:
  '/ibans/{iban}/validity':
    get:
      tags:
        - ibans
      summary: Check validity of an IBAN, with SEPA-only option.
      description: You can check whether an IBAN is valid, by restricting validation to SEPA countries.
      operationId: getIbanValidity
      parameters:
        - in: path
          name: iban
          schema:
            $ref: '#/components/schemas/Iban'
          required: true
          description: IBAN to validate
        - in: query
          name: sepa_only
          schema:
            $ref: '#/components/schemas/BooleanAsString'
          required: false
          description: Whether the IBAN validation must be restricted to SEPA countries
      responses:
        '200':
          description: Valid IBAN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanValidity'
            application/xml:
              schema:
                $ref: '#/components/schemas/IbanValidity'
        '400':
          description: Input IBAN is formally invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MIRI
                    severity: Fatal
                    text: Invalid IBAN resource identifier (not matching expression [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}) or missing IBAN resource identifier
                    user_message: Wrong URL format
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MIRI</code>
                <severity>Fatal</severity>
                <text>Invalid IBAN resource identifier (not matching expression [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}) or missing IBAN resource identifier</text>
                <user_message>Wrong URL format</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Supplied IBAN is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.IICC
                    severity: Fatal
                    text: ISO IBAN country code prefix is not valid
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.IICC</code>
                <severity>Fatal</severity>
                <text>ISO IBAN country code prefix is not valid</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/ibans/{iban}/bic':
    get:
      tags:
        - ibans
      summary: Get the BIC for an IBAN.
      description: For a given IBAN, you can retrieve the BIC of the institution that services the IBAN. This API is compliant with the requirement for BIC from IBAN derivation defined in the Regulation (EU) No 260/2012.
      operationId: getBicFromIban
      parameters:
        - in: path
          name: iban
          schema:
            $ref: '#/components/schemas/Iban'
          required: true
          description: IBAN for which the corresponding BIC is requested
      responses:
        '200':
          description: Corresponding BIC found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanBic'
            application/xml:
              schema:
                $ref: '#/components/schemas/IbanBic'
        '400':
          description: Input IBAN is formally invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MIRI
                    severity: Fatal
                    text: Invalid IBAN resource identifier (not matching expression [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}) or missing IBAN resource identifier
                    user_message: Wrong URL format
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MIRI</code>
                <severity>Fatal</severity>
                <text>Invalid IBAN resource identifier (not matching expression [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}) or missing IBAN resource identifier</text>
                <user_message>Wrong URL format</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No corresponding BIC found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.BINF
                    severity: Fatal
                    user_message: No corresponding BIC found
                    text: The supplied IBAN does not exist or has no BIC associated
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.BINF</code>
                <severity>Fatal</severity>
                <text>No corresponding BIC found</text>
                <user_message>The supplied IBAN does not exist or has no BIC associated</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/ibans/{iban}':
    get:
      tags:
        - ibans
      summary: Get details for an IBAN.
      description: For a given IBAN, you can obtain the components of the IBAN.
      operationId: getIbanDetails
      parameters:
        - in: path
          name: iban
          schema:
            $ref: '#/components/schemas/Iban'
          required: true
          description: IBAN for which details are requested
      responses:
        '200':
          description: Corresponding IBAN found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanDetailsWithIsoFlag'
            application/xml:
              schema:
                $ref: '#/components/schemas/IbanDetailsWithIsoFlag'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No corresponding IBAN found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.INVI
                    severity: Fatal
                    text: Invalid IBAN
                    user_message: Invalid IBAN
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.INVI</code>
                <severity>Fatal</severity>
                <text>Invalid IBAN</text>
                <user_message>Invalid IBAN</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/ibans':
    get:
      tags:
        - ibans
      summary: IBAN constructor.
      description: Build a valid IBAN from BBAN elements (e.g. bank code, branch code, account number). Required BBAN elements depend on the country.
      operationId: ibanConstructor
      parameters:
        - $ref: '#/components/parameters/ibanCountryCode'
        - in: query
          name: bban_elements
          description: BBAN elements, supplied either as separate tokens or as single token (full BBAN).
          schema:
            type: object
            additionalProperties:
              type: string
              pattern: '^[0-9A-Z]{1,30}$'
            maxProperties: 10
          examples:
            IT_separate_tokens:
              summary: Italian BBAN as separate elements
              value:
                checksum: X
                bank_code: '05428'
                branch_code: '11101'
                account: '000000123456'
            IT_single_token:
              summary: Italian BBAN as single element (full BBAN)
              value:
                bban: X0542811101000000123456
      responses:
        '200':
          description: IBAN code was successfully built from BBAN elements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanBuilt'
            application/xml:
              schema:
                $ref: '#/components/schemas/IbanBuilt'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MIBE
                    severity: Fatal
                    text: account not provided
                  - code: REDA.API.MIBE
                    severity: Fatal
                    text: bank_code not provided
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MIBE</code>
                <severity>Fatal</severity>
                <text>account not provided</text>
                </error>
                <error>
                <code>REDA.API.MIBE</code>
                <severity>Fatal</severity>
                <text>bank_code not provided</text>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: IBAN contruction failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.IBEV
                    severity: Fatal
                    text: country_code has an invalid value
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MIBE</code>
                <severity>Fatal</severity>
                <text>country_code has an invalid value</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/iban_national_ids/{iban_national_id}/bic':
    get:
      tags:
        - iban_national_ids
      summary: Get the BIC for an IBAN national ID.
      description: For a given IBAN national ID, you can retrieve the BIC of the institution that services the IBAN.
      operationId: getBicFromIbanNationalId
      parameters:
        - in: path
          name: iban_national_id
          schema:
            $ref: '#/components/schemas/AlphaNumStringMax30'
          required: true
          description: IBAN national ID for which the corresponding BIC is requested
        - in: query
          name: country_code
          schema:
            $ref: '#/components/schemas/CountryCode'
          required: true
          description: The 2-character ISO 3166-1 country code of the country that issued the IBAN National ID
      responses:
        '200':
          description: Corresponding BIC found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanNationalIdBic'
            application/xml:
              schema:
                $ref: '#/components/schemas/IbanNationalIdBic'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICCF
                    severity: Fatal
                    text: Invalid country code format
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICCF</code>
                <severity>Fatal</severity>
                <text>Invalid country code format</text>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: BIC not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.NICT
                    severity: Fatal
                    text: Country not supporting IBANs
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.NICT</code>
                <severity>Fatal</severity>
                <text>Country not supporting IBANs</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bbans/{bban}/iban':
    get:
      tags:
        - bbans
      summary: Get the IBAN from a BBAN.
      description: For a given Basic Bank Account Number (BBAN), you can retrieve the corresponding IBAN; you must also provide a country code.
      operationId: getIbanFromBban
      parameters:
        - in: path
          name: bban
          schema:
            $ref: '#/components/schemas/AlphaNumStringMax30'
          required: true
          description: BBAN for which the corresponding IBAN is requested
          example: '500700100532013000'
        - in: query
          name: country_code
          schema:
            $ref: '#/components/schemas/CountryCode'
          required: true
          description: The 2-character ISO 3166-1 country code of the country that issued the National ID
      responses:
        '200':
          description: Corresponding IBAN found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanOfBban'
            application/xml:
              schema:
                $ref: '#/components/schemas/IbanOfBban'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICCP
                    severity: Fatal
                    text: The supplied country code does not exist
                    user_message: Invalid country code parameter
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICCP</code>
                <severity>Fatal</severity>
                <text>The supplied country code does not exist</text>
                <user_message>Invalid country code parameter</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No corresponding IBAN found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.IBNF
                    severity: Fatal
                    text: No corresponding IBAN found
                    user_message: No corresponding IBAN found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.IBNF</code>
                <severity>Fatal</severity>
                <text>No corresponding IBAN found</text>
                <user_message>No corresponding IBAN found</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bbans/elements':
    get:
      tags:
        - bbans
      summary: Get BBAN elements of an IBAN country.
      description: Get all BBAN element combinations that can be used as input of IBAN constructor for a specific country. Each BBAN element is described by name, length, mandatory/optional flag, position within BBAN.
      operationId: getBbanElements
      parameters:
        - $ref: '#/components/parameters/ibanCountryCode'
      responses:
        '200':
          description: BBAN elements found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BbanElements'
            application/xml:
              schema:
                $ref: '#/components/schemas/BbanElements'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICCP
                    severity: Fatal
                    text: IBAN country code parameter is not valid
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICCP</code>
                <severity>Fatal</severity>
                <text>IBAN country code parameter is not valid</text>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: BBAN elements not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.BENF
                    severity: Fatal
                    text: No corresponding BBAN elements found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.BENF</code>
                <severity>Fatal</severity>
                <text>No corresponding BBAN elements found</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bics/{bic}':
    get:
      tags:
        - bics
      summary: Get details of a BIC.
      description: For a given BIC, you can retrieve the details of that BIC, that is the bank name or business name, and the address and the SWIFT service details.
      operationId: getBicDetails
      parameters:
        - in: path
          name: bic
          schema:
            $ref: '#/components/schemas/Bic'
          required: true
          description: BIC (8-characters or 11-characters) for which details are requested
      responses:
        '200':
          description: Corresponding BIC found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BicIsoDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/BicIsoDetails'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: BIC not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.BINF
                    severity: Fatal
                    text: The supplied BIC does not exist within the BIC Directory
                    user_message: No corresponding BIC found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.BINF</code>
                <severity>Fatal</severity>
                <text>The supplied BIC does not exist within the BIC Directory</text>
                <user_message>No corresponding BIC found</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bics/{bic}/validity':
    get:
      tags:
        - bics
      summary: Check validity of a BIC.
      description: You can check whether a BIC is correct and valid, that is whether it is published in the BIC Directory; optionally, you can check whether a BIC was valid at a particular date in the past.
      operationId: getBicValidity
      parameters:
        - in: path
          name: bic
          schema:
            $ref: '#/components/schemas/Bic'
          required: true
          description: BIC (8-characters or 11-characters) to validate
        - in: query
          name: effective_date
          schema:
            type: string
            format: date
          required: false
          description: A date in YYYY-MM-DD format
          example: '2019-07-23'
      responses:
        '200':
          description: Valid BIC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BicValidity'
            application/xml:
              schema:
                $ref: '#/components/schemas/BicValidity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MBRI
                    severity: Fatal
                    text: Invalid BIC resource identifier (not matching expression [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}) or missing BIC resource identifier
                    user_message: Invalid BIC format or BIC not supplied
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MBRI</code>
                <severity>Fatal</severity>
                <text>Invalid BIC resource identifier (not matching expression [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}) or missing BIC resource identifier</text>
                <user_message>Invalid BIC format or BIC not supplied</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Supplied BIC is not formally valid or does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.IBIC
                    severity: Fatal
                    text: BIC resource identifier matches expression [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1},but it does not exist within the BIC Directory (or is invalid on the supplied date, if supplied)
                    user_message: Invalid BIC
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.IBIC</code>
                <severity>Fatal</severity>
                <text>BIC resource identifier matches expression [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1},but it does not exist within the BIC Directory (or is invalid on the supplied date, if supplied)</text>
                <user_message>Invalid BIC</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bics/{bic}/lei':
    get:
      tags:
        - bics
      summary: Get the LEI for a BIC.
      description: For a given BIC (Business Identifier Code), you can retrieve the LEI (Legal Entity Identifier) of that BIC.
      operationId: getLeiFromBic
      parameters:
        - in: path
          name: bic
          schema:
            $ref: '#/components/schemas/Bic'
          required: true
          description: BIC (8-characters or 11-characters) for which the corresponding LEI is requested
      responses:
        '200':
          description: Corresponding LEI found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeiFound'
            application/xml:
              schema:
                $ref: '#/components/schemas/LeiFound'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Corresponding LEI not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.LEIN
                    severity: Fatal
                    text: The BIC does not exist or has no LEI associated
                    user_message: No corresponding LEI found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.LEIN</code>
                <severity>Fatal</severity>
                <text>The BIC does not exist or has no LEI associated</text>
                <user_message>No corresponding LEI found</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bics/{bic}/national_ids':
    get:
      tags:
        - bics
      summary: Get National IDs for a BIC.
      description: For a given BIC, you can retrieve the National IDs of that BIC.
      operationId: getNationalIdsFromBic
      parameters:
        - in: path
          name: bic
          schema:
            $ref: '#/components/schemas/Bic'
          required: true
          description: BIC (8-characters or 11-characters) for which the corresponding National IDs are requested
      responses:
        '200':
          description: Corresponding National ID(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NationalIdsFound'
            application/xml:
              schema:
                $ref: '#/components/schemas/NationalIdsFound'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MBRI
                    severity: Fatal
                    text: Missing BIC resource identifier
                    user_message: Wrong URL format
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MBRI</code>
                <severity>Fatal</severity>
                <text>Missing BIC resource identifier</text>
                <user_message>Wrong URL format</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Corresponding National ID(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.NNIF
                    severity: Fatal
                    text: The BIC does not exist or has no national ID associated
                    user_message: No corresponding national ID found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.NNIF</code>
                <severity>Fatal</severity>
                <text>The BIC does not exist or has no national ID associated</text>
                <user_message>No corresponding national ID found</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bics/{bic}/reachability':
    get:
      tags:
        - bics
      summary: Validate SEPA reachability of a BIC.
      description: For a given BIC and SEPA payment scheme, you can validate that it can be reached for SEPA payments and return the SEPA channel CSM (Clearing and Settlement System) through which the bank owning the BIC can be reached; the response also returns the adherence BIC that signed the adherence agreement with the EPC and the intermediary institution's BIC (if applicable and available).
      operationId: getSepaReachabilityFromBic
      parameters:
        - in: path
          name: bic
          schema:
            $ref: '#/components/schemas/Bic'
          required: true
          description: BIC (8-characters or 11-characters) for which SEPA reachability is requested
        - in: query
          name: sepa_scheme
          schema:
            type: string
            minLength: 1
            maxLength: 4
          required: true
          description: SEPA service code
          example: SDD
      responses:
        '200':
          description: Payment channel(s) found with the supplied BIC and scheme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BicReachabilityFound'
            application/xml:
              schema:
                $ref: '#/components/schemas/BicReachabilityFound'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ISSC
                    severity: Fatal
                    text: SEPA scheme parameter not supplied, supplied with a wrong parameter name or the SEPA scheme does not exist (only SDD, SCT, SDB and SCTINST allowed)
                    user_message: Invalid SEPA scheme parameter
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ISSC</code>
                <severity>Fatal</severity>
                <text>SEPA scheme parameter not supplied, supplied with a wrong parameter name or the SEPA scheme does not exist (only SDD, SCT, SDB and SCTINST allowed)</text>
                <user_message>Invalid SEPA scheme parameter</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No payment channel found with the supplied BIC and scheme or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICHA
                    severity: Fatal
                    text: The supplied BIC does not exist or has no payment channel associated with the supplied SEPA scheme
                    user_message: No payment channel found with the supplied BIC and scheme
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICHA</code>
                <severity>Fatal</severity>
                <text>The supplied BIC does not exist or has no payment channel associated with the supplied SEPA scheme</text>
                <user_message>No payment channel found with the supplied BIC and scheme</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bics/{bic}/ssis':
    get:
      tags:
        - bics
      summary: Get SSIs for a BIC.
      description: For a given BIC, you can retrieve the Standing Settlement Instructions (SSIs) for that BIC, for a given currency, and (optionally) an asset category.
      operationId: getSsisFromBic
      parameters:
        - in: path
          name: bic
          schema:
            $ref: '#/components/schemas/Bic'
          required: true
          description: BIC (8-characters or 11-characters) for which the corresponding SSIs are requested
        - in: query
          name: iso_currency_code
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          required: true
          description: A 3-character currency code for which SSI data needs to be retrieved
        - in: query
          name: asset_category
          schema:
            $ref: '#/components/schemas/SsiAssetCategory'
          required: false
          description: Code that indicates the asset category for which SSI data needs to be retrieved
      responses:
        '200':
          description: Records found matching the supplied parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SsisFound'
            application/xml:
              schema:
                $ref: '#/components/schemas/SsisFound'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICCY
                    severity: Fatal
                    text: Currency parameter not supplied, supplied with a wrong parameter name or it does not exist (not ISO 4217-compliant)
                    user_message: Invalid currency parameter
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICCY</code>
                <severity>Fatal</severity>
                <text>Currency parameter not supplied, supplied with a wrong parameter name or it does not exist (not ISO 4217-compliant)</text>
                <user_message>Invalid currency parameter</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No records found matching the supplied input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.NOSS
                    severity: Fatal
                    text: The supplied BIC does not exist or has no SSI with the specified currency and category
                    user_message: No SSI matching the supplied parameters
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.NOSS</code>
                <severity>Fatal</severity>
                <text>The supplied BIC does not exist or has no SSI with the specified currency and category</text>
                <user_message>No SSI matching the supplied parameters</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/bics/{bic}/connected_bic':
    get:
      tags:
        - bics
      summary: Get connected BIC.
      description: For a given BIC, retrieve the related connected BIC (or SWIFT BIC), which is a BIC connected to the SWIFT network, therefore usable in the header of a SWIFT message. If available, it is a BIC of the same institution, otherwise it's the correspondent through which the input BIC connects.
      operationId: getConnectedBic
      parameters:
        - in: path
          name: bic
          schema:
            $ref: '#/components/schemas/Bic'
          required: true
          description: BIC resource identifier
      responses:
        '200':
          description: Connected BIC found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedBicFound'
            application/xml:
              schema:
                $ref: '#/components/schemas/ConnectedBicFound'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.INVP
                    severity: Fatal
                    text: Invalid parameter
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.INVP</code>
                <severity>Fatal</severity>
                <text>Invalid parameter</text>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Input BIC does not exist of connected BIC not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.NCBF
                    severity: Fatal
                    text: No connected BIC found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.NCBF</code>
                <severity>Fatal</severity>
                <text>No connected BIC found</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/leis/{lei}/bic':
    get:
      tags:
        - leis
      summary: Get the BIC for an LEI.
      description: For a given LEI, you can retrieve the BIC of that LEI.
      operationId: getBicFromLei
      parameters:
        - in: path
          name: lei
          schema:
            $ref: '#/components/schemas/Lei'
          required: true
          description: LEI (20-characters) for which the corresponding BIC is requested
      responses:
        '200':
          description: Corresponding BIC found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeiBic'
            application/xml:
              schema:
                $ref: '#/components/schemas/LeiBic'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MLRI
                    severity: Fatal
                    text: Missing LEI resource identifier
                    user_message: Wrong URL format
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MLRI</code>
                <severity>Fatal</severity>
                <text>Missing LEI resource identifier</text>
                <user_message>Wrong URL format</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Corresponding BIC not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.BINF
                    severity: Fatal
                    text: The LEI does not exist or has no BIC associated
                    user_message: No corresponding BIC found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.BINF</code>
                <severity>Fatal</severity>
                <text>The LEI does not exist or has no BIC associated</text>
                <user_message>No corresponding BIC found</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/leis/{lei}/validity':
    get:
      tags:
        - leis
      summary: Check validity of a LEI.
      description: You can check whether a LEI is formally correct and exists.
      operationId: getLeiValidity
      parameters:
        - in: path
          name: lei
          schema:
            $ref: '#/components/schemas/Lei'
          required: true
          description: LEI to validate
      responses:
        '200':
          description: Valid LEI
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeiValidity'
            application/xml:
              schema:
                $ref: '#/components/schemas/LeiValidity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MCRI
                    severity: Fatal
                    text: Missing LEI resource identifier
                    user_message: Wrong URL format
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MCRI</code>
                <severity>Fatal</severity>
                <text>Missing LEI resource identifier</text>
                <user_message>Wrong URL format</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Invalid LEI or LEI not found or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ILEI
                    severity: Fatal
                    text: LEI resource identifier matches expression [0-9A-Z]{20}, but it does not exist
                    user_message: Invalid LEI
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ILEI</code>
                <severity>Fatal</severity>
                <text>LEI resource identifier matches expression [0-9A-Z]{20}, but it does not exist</text>
                <user_message>Invalid LEI</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/leis/{lei}':
    get:
      tags:
        - leis
      summary: Get details of a LEI.
      description: For a given LEI, you can retrieve the details of that LEI.
      operationId: getLeiDetails
      parameters:
        - in: path
          name: lei
          schema:
            $ref: '#/components/schemas/Lei'
          required: true
          description: LEI for which details are requested
      responses:
        '200':
          description: Corresponding LEI found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeiDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/LeiDetails'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: LEI not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.LENF
                    severity: Fatal
                    text: The LEI does not exist
                    user_message: LEI not found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.LENF</code>
                <severity>Fatal</severity>
                <text>The LEI does not exist</text>
                <user_message>LEI not found</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/national_ids/{national_id}':
    get:
      tags:
        - national_ids
      summary: Get details of a National ID.
      description: For a given National ID, you can retrieve the details of that National ID, that is the bank name or business name, and the address. You must provide either a country code, or an indication to which scheme the National ID belongs.
      operationId: getNationalIdDetails
      parameters:
        - in: path
          name: national_id
          schema:
            $ref: '#/components/schemas/NationalIdCode'
          required: true
          description: National ID (a synonym for clearing code, routing code, sort code, bank and branch ID) for which details are requested
        - in: query
          name: country_code
          schema:
            $ref: '#/components/schemas/CountryCode'
          required: false
          description: The 2-character ISO 3166-1 country code of the country that issued the National ID (mandatory, when scheme parameter is not provided)
        - in: query
          name: scheme
          schema:
            $ref: '#/components/schemas/NationalIdScheme'
          required: false
          description: The scheme (a synonym for the National ID type) under which the National ID is defined (mandatory, when country_code parameter is not provided)
          example: DE-BLZ8
        - in: query
          name: only_local_language
          schema:
            $ref: '#/components/schemas/BooleanAsString'
          required: false
          description: Whether fields must be returned in local language
      responses:
        '200':
          description: Corresponding National ID(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NationalIdDetailsFound'
            application/xml:
              schema:
                $ref: '#/components/schemas/NationalIdDetailsFound'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.INIF
                    severity: Fatal
                    text: Invalid National ID format
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.INIF</code>
                <severity>Fatal</severity>
                <text>Invalid National ID format</text>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No corresponding National ID found or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.NNIF
                    severity: Fatal
                    text: National ID not found
                    user_message: National ID not found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.NNIF</code>
                <severity>Fatal</severity>
                <text>National ID not found</text>
                <user_message>National ID not found</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/national_ids/{national_id}/validity':
    get:
      tags:
        - national_ids
      summary: Check the Validity of a National ID.
      description: With this API call, you can check whether a National ID format is correct and the value exists in SWIFT's list of National IDs; you need to provide the National ID, and either a country code, or an indication to which scheme this National ID belongs.
      operationId: getNationalIdValidity
      parameters:
        - in: path
          name: national_id
          schema:
            $ref: '#/components/schemas/NationalIdCode'
          required: true
          description: National ID (a synonym for clearing code, routing code, sort code, bank and branch ID) to validate
        - in: query
          name: country_code
          schema:
            $ref: '#/components/schemas/CountryCode'
          required: false
          description: The 2-character ISO 3166-1 country code of the country that issued the National ID (mandatory, when scheme parameter is not provided)
        - in: query
          name: scheme
          schema:
            $ref: '#/components/schemas/NationalIdScheme'
          required: false
          description: The scheme (a synonym for the National ID type) under which the National ID is defined (mandatory, when country_code parameter is not provided); it maps all possible National ID types (id_type, national_id_type, iso_clc_type)
          example: DE-BLZ8
      responses:
        '200':
          description: The National ID is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidNationalIdWithValidityFlag'
            application/xml:
              schema:
                $ref: '#/components/schemas/ValidNationalIdWithValidityFlag'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICTP
                    severity: Fatal
                    text: Supplied scheme does not exist (/AN and /FN suffixes are not allowed)
                    user_message: Invalid scheme parameter
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICTP</code>
                <severity>Fatal</severity>
                <text>Supplied scheme does not exist (/AN and /FN suffixes are not allowed)</text>
                <user_message>Invalid scheme parameter</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: The National ID is formally invalid or is valid but it does not exist, or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.INID
                    severity: Fatal
                    text: The existence of the National ID cannot be confirmed against SWIFT's list of National IDs because it is either an invalid code or SWIFT's list is incomplete. However, its format is correct.
                    user_message: Invalid National ID
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.INID</code>
                <severity>Fatal</severity>
                <text>The existence of the National ID cannot be confirmed against SWIFT's list of National IDs because it is either an invalid code or SWIFT's list is incomplete. However, its format is correct.</text>
                <user_message>Invalid National ID</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/national_ids/{national_id}/bics':
    get:
      tags:
        - national_ids
      summary: Get BICs of a National ID.
      description: For a given National ID, you can retrieve the BIC or the BICs of that National ID; you need to provide the National ID, and either a country code, or an indication to which scheme this National ID belongs.
      operationId: getBicsFromNationalId
      parameters:
        - in: path
          name: national_id
          schema:
            $ref: '#/components/schemas/NationalIdCode'
          required: true
          description: National ID (a synonym for clearing code, routing code, sort code, bank and branch ID) for which the corresponding BICs are requested
        - in: query
          name: country_code
          schema:
            $ref: '#/components/schemas/CountryCode'
          required: false
          description: The 2-character ISO 3166-1 country code of the country that issued the National ID (mandatory, when scheme parameter is not provided)
        - in: query
          name: scheme
          schema:
            $ref: '#/components/schemas/NationalIdScheme'
          required: false
          description: The scheme (a synonym for the National ID type) under which the National ID is defined (mandatory, when country_code parameter is not provided)
          example: DE-BLZ8
      responses:
        '200':
          description: Corresponding BIC(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BicsFound'
            application/xml:
              schema:
                $ref: '#/components/schemas/BicsFound'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICTP
                    severity: Fatal
                    text: Supplied scheme does not exist
                    user_message: Invalid scheme parameter
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICTP</code>
                <severity>Fatal</severity>
                <text>Supplied scheme does not exist</text>
                <user_message>Invalid scheme parameter</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Corresponding BIC(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.BINF
                    severity: Fatal
                    text: The supplied national ID does not exist, does not exist with the supplied scheme or country code or has no BIC associated
                    user_message: No corresponding BIC found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.BINF</code>
                <severity>Fatal</severity>
                <text>The supplied national ID does not exist, does not exist with the supplied scheme or country code or has no BIC associated</text>
                <user_message>No corresponding BIC found</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/country_codes/{country_code}/validity':
    get:
      tags:
        - country_codes
      summary: Check validity of a country code.
      description: You can check whether a country code is correct and valid.
      operationId: getCountryCodeValidity
      parameters:
        - in: path
          name: country_code
          schema:
            oneOf:
              - $ref: '#/components/schemas/TwoLetterCode'
              - $ref: '#/components/schemas/ThreeLetterCode'
              - $ref: '#/components/schemas/ThreeDigitCode'
          required: true
          description: Country code (2-letters, 3-letters or 3-digits) to validate
          example: DE
      responses:
        '200':
          description: Valid country code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryCodeValidity'
            application/xml:
              schema:
                $ref: '#/components/schemas/CountryCodeValidity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MCRI
                    severity: Fatal
                    text: 'The country code is not in one of the three supported formats: 2a, 3a or 3n'
                    user_message: 'The country code is not in one of the three supported formats: 2a, 3a or 3n'
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MCRI</code>
                <severity>Fatal</severity>
                <text>The country code is not in one of the three supported formats: 2a, 3a or 3n</text>
                <user_message>The country code is not in one of the three supported formats: 2a, 3a or 3n</user_message>
                </error>
                </errors>'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Invalid country code or country code not found or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICOC
                    severity: Fatal
                    text: The country code does not exist
                    user_message: The country code matches one of the three supported formats (2a, 3a or 3n), but it does not exist
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICOC</code>
                <severity>Fatal</severity>
                <text>The country code does not exist</text>
                <user_message>The country code matches one of the three supported formats (2a, 3a or 3n), but it does not exist</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/country_codes/{country_code}':
    get:
      tags:
        - country_codes
      summary: Get details of a country code.
      description: For a given country code, you can retrieve the details of that country code, that is the name, other codes and official currencies.
      operationId: getCountryCodeDetails
      parameters:
        - in: path
          name: country_code
          schema:
            oneOf:
              - $ref: '#/components/schemas/TwoLetterCode'
              - $ref: '#/components/schemas/ThreeLetterCode'
              - $ref: '#/components/schemas/ThreeDigitCode'
          required: true
          description: Country code (2-letters, 3-letters or 3-digits) for which details are requested
          example: DE
      responses:
        '200':
          description: Corresponding country code found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
            application/xml:
              schema:
                $ref: '#/components/schemas/Country'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No corresponding country code found or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.CONF
                    severity: Fatal
                    text: The country code does not exist
                    user_message: The country code does not exist
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.CONF</code>
                <severity>Fatal</severity>
                <text>The country code does not exist</text>
                <user_message>The country code does not exist</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/currency_codes/{currency_code}/validity':
    get:
      tags:
        - currency_codes
      summary: Check validity of a currency code.
      description: You can check whether a currency code is correct and valid.
      operationId: getCurrencyCodeValidity
      parameters:
        - in: path
          name: currency_code
          schema:
            oneOf:
              - $ref: '#/components/schemas/ThreeLetterCode'
              - $ref: '#/components/schemas/ThreeDigitCode'
          required: true
          description: Currency code (3-letters or 3-digits) to validate
          example: EUR
      responses:
        '200':
          description: Valid currency code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyCodeValidity'
            application/xml:
              schema:
                $ref: '#/components/schemas/CurrencyCodeValidity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MCRI
                    severity: Fatal
                    text: 'The currency code is not in one of the two supported formats: 3a or 3n'
                    user_message: 'The currency code is not in one of the two supported formats: 3a or 3n'
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MCRI</code>
                <severity>Fatal</severity>
                <text>The currency code is not in one of the two supported formats: 3a or 3n</text>
                <user_message>The currency code is not in one of the two supported formats: 3a or 3n</user_message>
                </error>
                </errors>'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Invalid currency code or currency code not found or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICUC
                    severity: Fatal
                    text: 'The currency code is not in one of the two supported formats: 3a or 3n'
                    user_message: Invalid currency code
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICUC</code>
                <severity>Fatal</severity>
                <text>The currency code matches one of the two supported formats (3a or 3n), but it does not exist</text>
                <user_message>Invalid currency code</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/currency_codes/{currency_code}':
    get:
      tags:
        - currency_codes
      summary: Get details of a currency code.
      description: For a given currency code, you can retrieve the details of that currency code, that is the name, other codes, the fractional digits and the list of countries where the currency is used.
      operationId: getCurrencyCodeDetails
      parameters:
        - in: path
          name: currency_code
          schema:
            oneOf:
              - $ref: '#/components/schemas/ThreeLetterCode'
              - $ref: '#/components/schemas/ThreeDigitCode'
          required: true
          description: Currency code (3-letters or 3-digits) for which details are requested
          example: EUR
      responses:
        '200':
          description: Corresponding currency code found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
            application/xml:
              schema:
                $ref: '#/components/schemas/Currency'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No corresponding currency code found or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.CUNF
                    severity: Fatal
                    text: The currency code does not exist
                    user_message: The currency code does not exist
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.CUNF</code>
                <severity>Fatal</severity>
                <text>The currency code does not exist</text>
                <user_message>The currency code does not exist</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/currency_codes/{currency_code}/amount_validity':
    get:
      tags:
        - currency_codes
      summary: Check validity of a currency amount.
      description: You can check whether an amount is valid for a specific currency.
      operationId: getCurrencyAmountValidity
      parameters:
        - in: path
          name: currency_code
          schema:
            oneOf:
              - $ref: '#/components/schemas/ThreeLetterCode'
              - $ref: '#/components/schemas/ThreeDigitCode'
          required: true
          description: Currency code (3-letters or 3-digits) of the amount to validate
          example: EUR
        - in: query
          name: amount
          schema:
            type: string
            pattern: '^[0-9]*,[0-9]*$'
          required: true
          description: Currency amount to validate
          example: '12,34'
      responses:
        '200':
          description: Valid amount
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyAmountValidity'
              example:
                amount: '12,34'
                currency_code: EUR
                validity: VAMT
            application/xml:
              schema:
                $ref: '#/components/schemas/CurrencyAmountValidity'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <amount_validity>
                <amount>12,34</amount>
                <currency_code>EUR</currency_code>
                <validity>VAMT</validity>
                </amount_validity>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Invalid currency code, currency code not found, invalid amount decimals or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.IAMT
                    severity: Fatal
                    text: Invalid amount
                    user_message: Invalid amount
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.IAMT</code>
                <severity>Fatal</severity>
                <text>Invalid amount</text>
                <user_message>Invalid amount</user_message>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/account_numbers/{account_number}/validity':
    get:
      tags:
        - account_numbers
      summary: Check validity of account number formats, including IBANs.
      description: Check validity of account number formats, including IBANs, issued in almost any country in the world.
      operationId: getAccountNumberValidity
      parameters:
        - in: path
          name: account_number
          schema:
            $ref: '#/components/schemas/FullAccountNumber'
          required: true
          description: Account number to validate
          example: X0542811101000000123456
        - in: query
          name: country_code
          schema:
            $ref: '#/components/schemas/CountryCode'
          required: false
          description: ISO 2-letter country code of the country where the account is held
        - in: query
          name: is_iban
          schema:
            $ref: '#/components/schemas/BooleanAsString'
          required: false
          description: Whether the account number must be handled as an IBAN
        - in: query
          name: usage
          schema:
            type: string
            enum:
              - retail
              - wholesale
          required: false
          description: How the account number is used (only for a few countries)
          example: retail
        - in: query
          name: national_id
          schema:
            type: string
            pattern: '^[0-9a-zA-Z]{2,20}$'
          required: false
          description: National ID (bank ID, clearing code, sort code, routing number) of the account holding institution
          example: '0542811101'
        - in: query
          name: bic
          schema:
            $ref: '#/components/schemas/Bic'
          required: false
          description: BIC-8 or BIC-11 of the account holding institution
      responses:
        '200':
          description: Valid account number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountNumberValidity'
            application/xml:
              schema:
                $ref: '#/components/schemas/AccountNumberValidity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ANFI
                    severity: Fatal
                    text: The format of the account number is different from the allowed formats
                    user_message: Account number format is invalid
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ANFI</code>
                <severity>Fatal</severity>
                <text>The format of the account number is different from the allowed formats</text>
                <user_message>Account number format is invalid</user_message>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: Invalid account format or invalid checksum or wrong URL format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ANCI
                    severity: Fatal
                    text: At least one checksum is different from the calculated checksum
                    user_message: 'At least one account number checksum is invalid: CHECKSUM'
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ANCI</code>
                <severity>Fatal</severity>
                <text>At least one checksum is different from the calculated checksum</text>
                <user_message>At least one account number checksum is invalid: CHECKSUM</user_message>
                </error>
                </errors>'
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/pmis/participants':
    get:
      tags:
        - pmis
      summary: Search for PMI participants.
      description: Get a list of PMI (Payment Market Infrastructure) participants matching the input parameters.
      operationId: getPmiParticipants
      parameters:
        - in: query
          name: service_id_substring
          schema:
            $ref: '#/components/schemas/StringMax20'
          required: false
          description: Part of the service ID of a Payment Market Infrastructure
          example: CNAP
        - in: query
          name: participant_id_substring
          schema:
            $ref: '#/components/schemas/StringMax255'
          required: false
          description: Part of a Payment Market Infrastructure participant ID
          example: DEUTDE
        - in: query
          name: participant_name_substring
          schema:
            $ref: '#/components/schemas/StringMax255'
          required: false
          description: Part of a Payment Market Infrastructure participant name
          example: 'BANCO DE GALICIA'
        - $ref: '#/components/parameters/pmiCountryCode'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Records found matching the supplied parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PmiParticipants'
            application/xml:
              schema:
                $ref: '#/components/schemas/PmiParticipants'
          headers:
            Content-Location:
              required: true
              schema:
                type: string
                format: uri
              description: The real URL returning the current resource/resources, with all implicit pagination parameters explicited
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.ICCP
                    severity: Fatal
                    text: Invalid country_code parameter
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.ICCP</code>
                <severity>Fatal</severity>
                <text>Invalid country_code parameter</text>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No records found matching the supplied parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.PPNF
                    severity: Fatal
                    text: No records found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.PPNF</code>
                <severity>Fatal</severity>
                <text>No records found</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/pmis/participants/{participant_record_id}':
    get:
      tags:
        - pmis
      summary: Get PMI participant details.
      description: For a given participant record ID, you can retrieve all details of that PMI participant, as reported within REACHPLUS flatfile.
      operationId: getPmiParticipantDetails
      parameters:
        - in: path
          name: participant_record_id
          schema:
            type: integer
            minimum: 1
          required: true
          description: PMI participant record ID within REACHPLUS flatfile (not to be confused with participant_id, which corresponds to the REACHPLUS flatfile field with the same name)
      responses:
        '200':
          description: Record found matching the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PmiParticipantDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/PmiParticipantDetails'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No record found matching the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.PPNF
                    severity: Fatal
                    text: Record not found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.PPNF</code>
                <severity>Fatal</severity>
                <text>Record not found</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/pmis/{service_id}/structure':
    get:
      tags:
        - pmis
      summary: Get PMI participant structure.
      description: For the given Payment Market Infrastructure service ID, get the participant record structure as described by flatfile REACHPLUSSTRUCTURE.
      operationId: getPmiParticipantStructure
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          description: Record found matching the supplied service ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PmiParticipantStructure'
            application/xml:
              schema:
                $ref: '#/components/schemas/PmiParticipantStructure'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No record found matching the supplied service ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.PSNF
                    severity: Fatal
                    text: PMI structure not found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.PSNF</code>
                <severity>Fatal</severity>
                <text>PMI structure not found</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/pmis/{service_id}':
    get:
      tags:
        - pmis
      summary: Get PMI details.
      description: Get Payment Market Infrastructure details for the given service ID.
      operationId: getPmiDetails
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          description: PMI found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PmiDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/PmiDetails'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.MISI
                    severity: Fatal
                    text: service_id not provided
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.MISI</code>
                <severity>Fatal</severity>
                <text>service_id not provided</text>
                </error>
                </errors>
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: PMI not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.SINF
                    severity: Fatal
                    text: service_id not found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.SINF</code>
                <severity>Fatal</severity>
                <text>service_id not found</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/pmis':
    get:
      tags:
        - pmis
      summary: Search for Payment Market Infrastructures.
      description: Get a list of Payment Market Infrastructures matching the input parameters.
      operationId: getPmis
      # At least one parameter is required
      parameters:
        - name: service_id_substring
          in: query
          schema:
            $ref: '#/components/schemas/StringMax20'
          required: false
          description: Part of the service ID of a Payment Market Infrastructure
          example: CNAP
        - name: service_name_substring
          in: query
          schema:
            $ref: '#/components/schemas/StringMax105'
          required: false
          description: Part of the name of the Payment Market Infrastructure
          example: 'Advanced Payments'
        - name: currency_code
          in: query
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          required: false
          description: Currency cleared or settled on the Payment Market Infrastructure service
        - $ref: '#/components/parameters/pmiCountryCode'
      responses:
        '200':
          description: PMIs found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pmis'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pmis'
        '400':
          description: Wrong URL format or invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.INVP
                    severity: Fatal
                    text: "At least one of the following parameters must be supplied: service_id, service_name, currency_code, country_code"
                    user_message: Invalid parameters
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.PSNF</code>
                <severity>Fatal</severity>
                <text>At least one of the following parameters must be supplied: service_id, service_name, currency_code, country_code</text>
                <user_message>Invalid parameters</user_message>
                </error>
                </errors>'
        '401':
          $ref: '#/components/responses/Unallowed'
        '404':
          description: No records found matching the supplied parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                  - code: REDA.API.PMNF
                    severity: Fatal
                    text: No PMI found
            application/xml:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <errors>
                <error>
                <code>REDA.API.PMNF</code>
                <severity>Fatal</severity>
                <text>No PMI found</text>
                </error>
                </errors>
        '405':
          $ref: '#/components/responses/InvalidHttpMethod'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        default:
          $ref: '#/components/responses/UnexpectedError'
components:
  securitySchemes:
    oauthBearerToken:
      type: http
      scheme: bearer
      bearerFormat: opaque OAuth 2.0
      description: |
        Use the access token obtained as a result of OAuth 2.0 flows. 
        
        SWIFT supports two OAuth grant types depending on the API service.
        * JWT-Bearer grant type [RFC 7523](https://tools.ietf.org/html/rfc7523)
        * Password grant type
        
        This API uses password grant type.
        
        Please visit [SWIFT OAuth Token API](https://developer.swift.com/swift-oauth-token-api) for more information and examples.
        
        In this declaration only the basic security element to transport the bearer token of an OAuth2 process is declared.
  parameters:
    ibanCountryCode:
      name: country_code
      in: query
      description: The 2-character ISO 3166-1 country code of an IBAN country
      schema:
        $ref: '#/components/schemas/CountryCode'
      required: true
    pmiCountryCode:
      name: country_code
      in: query
      description: The 2-character ISO 3166-1 country code of a Payment Market Infrastructure
      schema:
        $ref: '#/components/schemas/CountryCode'
      required: false
    offset:
      in: query
      name: offset
      schema:
        type: integer
        minimum: 0
        default: 0
      required: false
      description: The number of records to skip before starting to collect the result set
      example: 20
    limit:
      in: query
      name: limit
      schema:
        type: integer
        enum:
          - 10
          - 20
          - 50
          - 100
          - 200
          - 500
          - 1000
        default: 20
      required: false
      description: The number of records to return
      example: 20
    serviceId:
      in: path
      name: service_id
      schema:
        $ref: '#/components/schemas/PmiServiceId'
      required: true
      description: Service ID of a Payment Market Infrastructure
      example: CN CNAPS
  responses:
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
        application/xml:
          schema:
            $ref: '#/components/schemas/Errors'
    InvalidHttpMethod:
      description: Request HTTP method is not accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: REDA.API.IREQ
                severity: Fatal
                text: Request performed with HTTP method other than GET
                user_message: Invalid request
    NotAcceptable:
      description: The server does not support the format asked by the consumer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: REDA.API.NOAC
                severity: Fatal
                text: Requested output format is not supported
    Unallowed:
      description: You do not have sufficient privileges to execute this service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: REDA.API.ILIC
                severity: Fatal
                text: You do not have sufficient privileges to execute this service
                user_message: You do not have sufficient privileges to execute this service
  schemas:
    BooleanAsString:
      type: string
      enum:
        - 'true'
        - 'false'
      example: 'true'
    StringMax16:
      description: Generic string definition, from 1 to 16 characters long
      type: string
      minLength: 1
      maxLength: 16
    StringMax20:
      description: Generic string definition, from 1 to 20 characters long
      type: string
      minLength: 1
      maxLength: 20
    StringMax35:
      description: Generic string definition, from 1 to 35 characters long
      type: string
      minLength: 1
      maxLength: 35
    StringMax70:
      description: Generic string definition, from 1 to 70 characters long
      type: string
      minLength: 1
      maxLength: 70
    StringMax105:
      description: Generic string definition, from 1 to 105 characters long
      type: string
      minLength: 1
      maxLength: 105
    StringMax140:
      description: Generic string definition, from 1 to 140 characters long
      type: string
      minLength: 1
      maxLength: 140
    StringMax255:
      description: Generic string definition, from 1 to 255 characters long
      type: string
      minLength: 1
      maxLength: 255
    TwoLetterCode:
      description: Generic 2-letter code
      type: string
      pattern: '^[A-Z]{2}$'
    TwoDigitCode:
      description: Generic 2-digit code
      type: string
      pattern: '^[0-9]{2}$'
    ThreeLetterCode:
      description: Generic 3-letter code
      type: string
      pattern: '^[A-Z]{3}$'
    ThreeDigitCode:
      description: Generic 3-digit code
      type: string
      pattern: '^[0-9]{3}$'
    AlphaNumStringMax30:
      description: Alphanumeric string definition, from 1 to 30 characters long
      type: string
      pattern: '^[0-9a-zA-Z]{1,30}$'
    InstitutionName:
      $ref: '#/components/schemas/StringMax140'
      # description: Name by which an institution is known and which is usually used to identify that institution
    InstitutionDepartment:
      $ref: '#/components/schemas/StringMax70'
    AddressLine:
      $ref: '#/components/schemas/StringMax140'
    CountryName:
      $ref: '#/components/schemas/StringMax70'
    CurrencyName:
      $ref: '#/components/schemas/StringMax70'
    City:
      $ref: '#/components/schemas/StringMax70'
    PostalCode:
      type: string
      minLength: 1
      maxLength: 15
      description: Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail
    IsoPostalCode:
      type: string
      minLength: 1
      maxLength: 16
      description: Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail
    IsoPostOfficeIdentifier:
      description: Numbered box in a post office, assigned to a person or organisation, where letters are kept until called for
      type: string
      minLength: 1
      maxLength: 16
    FullAccountNumber:
      $ref: '#/components/schemas/StringMax70'
    NationalIdScheme:
      $ref: '#/components/schemas/StringMax20'
      # description: Generic national ID scheme definition,
      #              introduced to avoid "oneOf:(Bank/Bdp/Iso5)NationalIdScheme"
    BankNationalIdScheme:
      $ref: '#/components/schemas/StringMax20'
      # description: Banks' identifier type
      # example: IT-ABICAB10
    BdpNationalIdScheme:
      $ref: '#/components/schemas/StringMax20'
      # description: BDP national ID type
      # example: ABICAB
    Iso5NationalIdScheme:
      type: string
      pattern: '^[A-Z]{5}$'
      description: ID type by ISO
      example: ITNCC
    EntityName:
      description: Legal entity name
      type: string
      minLength: 1
      maxLength: 320
    FinPlusDistinguishedName:
      $ref: '#/components/schemas/StringMax255'
      # description: Unique identifier of an entity that sends or receives messages over SWIFTNet.
      # example: 'ou=shd,o=handsess,o=swift'
    ReachPlusGenericAttribute:
      $ref: '#/components/schemas/StringMax255'
      # description: Generic attribute column of REACHPLUS flatfile, containing a PMI-specific value.
    Error:
      description: Custom error schema to support detailed error message.
      required:
        - code
        - severity
        - text
      type: object
      properties:
        severity:
          description: Specifies the severity of the error.
          type: string
          enum:
            - Fatal
            - Transient
            - Logic
        code:
          description: Specifies the custom error code as defined by the service provider.
          type: string
          minLength: 3
          maxLength: 70
        text:
          $ref: '#/components/schemas/StringMax255'
          # description: Specifies the detail error message identifying the cause of the error.
        user_message:
          $ref: '#/components/schemas/StringMax255'
          # description: A human-readable text describing the error.
        more_info:
          description: Specifies an URL to find more information about the error.
          type: string
          format: uri
      xml:
        name: error
      additionalProperties: false
      example:
        code: REDA.API.CODE
        severity: Fatal
        text: Error description
        user_message: User-friendly error description
    Errors:
      # Source: "SWIFT API Design Guidelines from Bitbucket" section 9.2
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
          minItems: 1
      xml:
        name: errors
      additionalProperties: false
    Link:
      type: object
      description: Hypermedia link relation of the current resource/resources
      required:
        - href
        - rel
        - type
      properties:
        href:
          type: string
          format: uri
          description: URL representing resource/resources related to the current one/ones
        rel:
          type: string
          enum:
            - first
            - last
            - next
            - previous
            - self
            - describedby
          description: How this link is related to the current resource/resources
          # All possible values available at https://www.iana.org/assignments/link-relations/link-relations.xhtml
        type:
          type: string
          enum:
            - GET
          description: HTTP method to use with this link
      additionalProperties: false
      example:
        href: https://api.swift.com/swiftrefdata/v4/pmis/participants?offset=0&limit=20
        rel: first
        type: GET
    Address2:
      type: object
      required:
        - country_name
      properties:
        street_address:
          type: array
          items:
            $ref: '#/components/schemas/AddressLine'
          minItems: 1
          maxItems: 4
        city:
          $ref: '#/components/schemas/City'
        region:
          $ref: '#/components/schemas/StringMax70'
        postal_code:
          $ref: '#/components/schemas/PostalCode'
        country_name:
          $ref: '#/components/schemas/CountryName'
      additionalProperties: false
    UnstructuredAddress:
      type: object
      description: ISO-compliant unstructured address
      required:
        - address_line_1
      properties:
        address_line_1:
          $ref: '#/components/schemas/StringMax35'
        address_line_2:
          $ref: '#/components/schemas/StringMax35'
        address_line_3:
          $ref: '#/components/schemas/StringMax35'
      additionalProperties: false
      example:
        address_line_1: "ONE OXFORD CTR"
        address_line_2: "301 GRANT ST, STE 3000"
        address_line_3: "PITTSBURGH PA 15219, US"
    StructuredAddress:
      type: object
      description: ISO-compliant structured address
      required:
        - country_code
        - country_name
      properties:
        street_name:
          $ref: '#/components/schemas/StringMax70'
        building_number:
          $ref: '#/components/schemas/StringMax16'
        building_name:
          $ref: '#/components/schemas/StringMax35'
        post_box:
          $ref: '#/components/schemas/IsoPostOfficeIdentifier'
        floor:
          $ref: '#/components/schemas/StringMax70'
        room:
          $ref: '#/components/schemas/StringMax70'
        post_code:
          $ref: '#/components/schemas/IsoPostalCode'
        town_name:
          $ref: '#/components/schemas/StringMax35'
        town_location_name:
          $ref: '#/components/schemas/StringMax35'
        district_name:
          $ref: '#/components/schemas/StringMax35'
        country_subdivision_name:
          $ref: '#/components/schemas/StringMax35'
        country_subdivision_code:
          $ref: '#/components/schemas/StringMax35'
        country_code:
          $ref: '#/components/schemas/CountryCode'
        country_name:
          $ref: '#/components/schemas/CountryName'
      additionalProperties: false
      example:
        street_name: "GRANT ST"
        building_number: "301"
        building_name: "ONE OXFORD CTR"
        post_box: "PO BOX 867"
        room: "STE 3000"
        post_code: "15219"
        town_name: "PITTSBURGH"
        country_subdivision_name: "PENNSYLVANIA"
        country_subdivision_code: "PA"
        country_code: "US"
        country_name: "UNITED STATES OF AMERICA"
    SwiftSubtypeIndicator:
      type: string
      pattern: '^[0-9A-Z]{4}$'
      description: SWIFT subtype indicator
      example: SUPE
    LanguageCode:
      type: string
      pattern: '^[A-Z]{3}$'
      description: ISO 639-2 code (three letters) of language
      example: CHI
    LanguageScript:
      type: string
      description: ISO 15924 code (four letters) of language script
      # pattern: '^[A-Z]{4}$'
      example: HANS
    TimeOffset:
      type: string
      pattern: '^[±+-]\d\d:\d\d$'
      description: Difference in hours and minutes between two places
    SwiftService:
      description: SWIFT service code and name
      type: object
      xml:
        name: swift_service
      required:
        - code
        - name
      properties:
        code:
          type: string
          pattern: '^[A-Z]{2}[A-Z+]$'
          description: Code given by the service provider (SWIFT) to uniquely identify a service it offers
        name:
          $ref: '#/components/schemas/StringMax105'
          # description: Name given by the service provider (SWIFT) to uniquely identify a service it offers
      example:
        code: TGT
        name: TARGET2 DIRECT PARTICIPANTS
      additionalProperties: false
    SwiftConnectivity:
      description: Institution connection to SWIFTNet messaging services
      type: object
      required:
        - fin
        - interact
        - fileact
      properties:
        fin:
          type: boolean
          description: True if connected to SWIFT FIN, false otherwise
        finplus:
          type: object
          description: FINplus Distinguished Names (DN), used to uniquely identify an entity that sends or receives messages over SWIFTNet.
          properties:
            future:
              $ref: '#/components/schemas/FinPlusDistinguishedName'
            live:
              $ref: '#/components/schemas/FinPlusDistinguishedName'
            pilot:
              $ref: '#/components/schemas/FinPlusDistinguishedName'
          additionalProperties: false
        interact:
          type: boolean
          description: True if used in at least one service on SWIFTNet InterAct, false otherwise
        fileact:
          type: boolean
          description: True if used in at least one service on SWIFTNet FileAct, false otherwise
      additionalProperties: false
      example:
        fin: true
        finplus:
          future: 'ou=shd,o=handsess,o=swift'
          live: 'ou=shd,o=handsess,o=swift'
          pilot: 'ou=shd,o=handsess,o=swift'
        interact: false
        fileact: false
    SepaPaymentChannel:
      type: object
      required:
        - id
        - member_type
      properties:
        id:
          type: string
          pattern: '^([A-Z0-9]{4}|Unknown)$'
          description: The ID of the payment channel (SEPA-compliant CSM)
        member_type:
          type: string
          enum:
            - DRCT
            - IDRC
            - UKWN
          description: A payment channel has a member_type, the member_type has one of the codes DRCT, IDRC or UKWN (direct, indirect, unknown)
        direct_participant:
          $ref: '#/components/schemas/Bic'
          # description: The BIC of the direct participant through which the indirectly reachable BIC can be reached; it may only be present if the payment channel's member is an indirect participant
      additionalProperties: false
    NationalIdDetails:
      type: object
      required:
        - national_id
        - id_type
        - name
        - structured_address
      properties:
        national_id:
          $ref: '#/components/schemas/NationalIdCode'
          # description: National ID for which details were requested
        id_type:
          $ref: '#/components/schemas/BankNationalIdScheme'
        national_id_type:
          $ref: '#/components/schemas/BdpNationalIdScheme'
        iso_clc_type:
          $ref: '#/components/schemas/Iso5NationalIdScheme'
        language_code:
          $ref: '#/components/schemas/LanguageCode'
        language_script:
          $ref: '#/components/schemas/LanguageScript'
        office_type:
          $ref: '#/components/schemas/OfficeType'
        name:
          $ref: '#/components/schemas/InstitutionName'
          # description: Name by which a party is known and which is usually used to identify that party
        department:
          $ref: '#/components/schemas/InstitutionDepartment'
        sub_department:
          $ref: '#/components/schemas/InstitutionDepartment'
        unstructured_address:
          $ref: '#/components/schemas/UnstructuredAddress'
        structured_address:
          $ref: '#/components/schemas/StructuredAddress'
        utc_offset:
          $ref: '#/components/schemas/TimeOffset'
      additionalProperties: false
      example:
        national_id: '043000300'
        id_type: 'AS-ABA9'
        national_id_type: 'ABA'
        iso_clc_type: 'USABA'
        office_type: 'DB'
        name: 'Federal Reserve Bank of Cleveland'
        department: 'Pittsburgh'
        unstructured_address:
          address_line_1: 'ONE OXFORD CTR'
          address_line_2: '301 GRANT ST, STE 3000'
          address_line_3: 'PITTSBURGH PA 15219, US'
        structured_address:
          street_name: 'GRANT ST'
          building_number: '301'
          building_name: 'ONE OXFORD CTR'
          post_box: 'PO BOX 867'
          room: 'STE 3000'
          post_code: '15219'
          town_name: 'PITTSBURGH'
          country_subdivision_name: 'PENNSYLVANIA'
          country_subdivision_code: 'PA'
          country_code: 'US'
          country_name: 'UNITED STATES OF AMERICA'
        utc_offset: "-05:00"
    NationalIdCode:
      description: National identifier of the institution or branch.
      type: string
      minLength: 2
      maxLength: 15
      pattern: '^[0-9A-Z]{2,15}$'
      example: '50070010'
    NationalId:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/NationalIdCode'
          # description: The National ID (a synonym for clearing code, routing code, sort code, bank and branch ID) of the institution or branch
        id_type:
          $ref: '#/components/schemas/BankNationalIdScheme'
        national_id_type:
          $ref: '#/components/schemas/BdpNationalIdScheme'
        iso_clc_type:
          $ref: '#/components/schemas/Iso5NationalIdScheme'
      additionalProperties: false
      example:
        id: '50070010'
        id_type: 'DE-BLZ8'
        national_id_type: BLZ
        iso_clc_type: DEBLZ
    Ssi:
      type: object
      required:
        - owner
        - iso_currency_code
        - asset_category
        - account_holding_institution
      properties:
        owner:
          type: object
          required:
            - bic
            - institution_name
            - iso_country_code
          properties:
            bic:
              $ref: '#/components/schemas/Bic'
            institution_name:
              $ref: '#/components/schemas/InstitutionName'
            iso_country_code:
              $ref: '#/components/schemas/CountryCode'
            city:
              $ref: '#/components/schemas/City'
        iso_currency_code:
          $ref: '#/components/schemas/CurrencyCode'
          # description: The ISO 3166-1 alpha-2 code of the country of the owner institution/branch.
        asset_category:
          $ref: '#/components/schemas/SsiAssetCategory'
        account_holding_institution:
          type: object
          required:
            - bic
            - institution_name
            - iso_country_code
            - institution_type
          properties:
            bic:
              $ref: '#/components/schemas/Bic'
            institution_name:
              $ref: '#/components/schemas/InstitutionName'
            iso_country_code:
              $ref: '#/components/schemas/CountryCode'
            account_number:
              $ref: '#/components/schemas/FullAccountNumber'
              # description: Account number of the owner BIC with the account holding institution.
            preferred:
              type: boolean
              description: Whether the account holding institution is a preferred correspondent.
            institution_type:
              type: string
              enum:
                - CORRESPONDENT
                - LOCAL CORRESPONDENT
              description: Whether the account holding institution is a local (account holder not located in the country of the currency) or a final correspondent (account holder located in the country of the currency).
        traffic_flag:
          type: boolean
          description: Whether the SSI has been seen within traffic over the previous 12 months, i.e. it has left behind fingerprints in the SWIFT messaging traffic (particularly MT 202 and MT 940/950).
        traffic_date:
          type: string
          format: date
          description: Optional field, currently not used.
        update_date:
          type: string
          format: date
          description: When the SSI was last updated by the customer or the SWIFTRef data collection team.
        start_date:
          type: string
          format: date
          description: When the SSI becomes effective.
        stop_date:
          type: string
          format: date
          description: When the SSI expires.
      example:
        owner:
          bic: DEUTDEFFXXX
          institution_name: Deutsche Bank AG
          city: FRANKFURT AM MAIN
          iso_country_code: DE
        iso_currency_code: USD
        asset_category: MMKT
        account_holding_institution:
          bic: CITIUS33XXX
          institution_name: CITIBANK N.A.
          iso_country_code: US
          account_number: '7892398045980'
          preferred: true
          institution_type: CORRESPONDENT
        traffic_flag: true
        traffic_date: '2021-02-28'
        update_date: '2021-06-30'
        start_date: '2021-01-01'
        stop_date: '2021-12-31'
    Country:
      type: object
      required:
        - name
        - iso_2a_code
      properties:
        name:
          $ref: '#/components/schemas/CountryName'
          # description: The ISO country name
        iso_2a_code:
          $ref: '#/components/schemas/TwoLetterCode'
          # description: The ISO 2-letters country code
        iso_3a_code:
          $ref: '#/components/schemas/ThreeLetterCode'
          # description: The ISO 3-letters country code
        iso_3n_code:
          $ref: '#/components/schemas/ThreeDigitCode'
          # description: The ISO 3-digits country code
        currencies:
          type: array
          items:
            type: object
            required:
              - name
              - iso_3a_code
            properties:
              name:
                $ref: '#/components/schemas/CurrencyName'
                # description: The ISO currency name
              iso_3a_code:
                $ref: '#/components/schemas/ThreeLetterCode'
                # description: The ISO 3-letters currency code
              iso_3n_code:
                $ref: '#/components/schemas/ThreeDigitCode'
                # description: The ISO 3-digits currency code
          description: A list of currencies used by the country
      example:
        name: ITALY
        iso_2a_code: IT
        iso_3a_code: ITA
        iso_3n_code: '380'
        currencies:
          - iso_3a_code: EUR
            iso_3n_code: '978'
            name: EURO
    Currency:
      type: object
      required:
        - name
        - iso_3a_code
      properties:
        name:
          $ref: '#/components/schemas/CurrencyName'
          # description: The ISO currency name
        iso_3a_code:
          $ref: '#/components/schemas/ThreeLetterCode'
          # description: The ISO 3-letters currency code
        iso_3n_code:
          $ref: '#/components/schemas/ThreeDigitCode'
          # description: The ISO 3-digits currency code
        fractional_digits:
          type: integer
          minimum: 0
          maximum: 5
          description: The number of fractional digits to use
        countries:
          type: array
          items:
            type: object
            required:
              - name
              - iso_2a_code
            properties:
              name:
                $ref: '#/components/schemas/CountryName'
                # description: The ISO country name
              iso_2a_code:
                $ref: '#/components/schemas/TwoLetterCode'
                # description: The ISO 2-letters country code
              iso_3a_code:
                $ref: '#/components/schemas/ThreeLetterCode'
                # description: The ISO 3-letters country code
              iso_3n_code:
                $ref: '#/components/schemas/ThreeDigitCode'
                # description: The ISO 3-digits country code
          description: A list of countries where the currency is used
      example:
        name: US DOLLAR
        iso_3a_code: USD
        iso_3n_code: '840'
        fractional_digits: 2
        countries:
          - iso_2a_code: AS
            iso_3a_code: ASM
            iso_3n_code: '016'
            name: AMERICAN SAMOA
          - iso_2a_code: BQ
            iso_3a_code: BES
            iso_3n_code: '535'
            name: BONAIRE, SINT EUSTATIUS AND SABA
    LeiDetails:
      type: object
      required:
        - lei
        - legal_name
      properties:
        lei:
          $ref: '#/components/schemas/Lei'
        legal_name:
          type: string
          minLength: 1
          maxLength: 350
        address:
          $ref: '#/components/schemas/Address2'
        head_quarters_address:
          $ref: '#/components/schemas/Address2'
        legal_jurisdiction:
          type: string
          minLength: 1
          maxLength: 10
        legal_form:
          $ref: '#/components/schemas/StringMax255'
        entity_legal_form_code:
          $ref: '#/components/schemas/StringMax255'
        entity_status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        initial_registration_date:
          type: string
          format: date
        last_update_date:
          type: string
          format: date
        registration_status:
          type: string
          minLength: 1
          maxLength: 30
        associated:
          type: object
          properties:
            entity_type:
              $ref: '#/components/schemas/StringMax20'
            lei:
              $ref: '#/components/schemas/Lei'
            entity_name:
              $ref: '#/components/schemas/EntityName'
        entity_expiration:
          type: object
          properties:
            date:
              type: string
              format: date
            reason:
              $ref: '#/components/schemas/StringMax70'
        successor:
          type: object
          properties:
            lei:
              $ref: '#/components/schemas/Lei'
            name:
              $ref: '#/components/schemas/EntityName'
      xml:
        name: lei
      example:
        lei: BFXS5XCH7N0Y05NIXW11
        legal_name: ABN AMRO Bank N.V.
        address:
          street_address:
            - Gustav Mahlerlaan 10
          city: Amsterdam
          region: NL-NH
          postal_code: 1082 PP
          country_name: NETHERLANDS
        head_quarters_address:
          street_address:
            - Gustav Mahlerlaan 10
          city: Amsterdam
          region: NL-NH
          postal_code: 1082 PP
          country_name: NETHERLANDS
        legal_jurisdiction: NL
        legal_form: NAAMLOZE VENNOOTSCHAP
        entity_legal_form_code: B5PM
        entity_status: ACTIVE
        initial_registration_date: '2012-06-06'
        last_update_date: '2018-08-16'
        registration_status: ISSUED
        associated:
          entity_type: FUND_FAMILY
          lei: W51AX6427FJZJFPF8H34
          entity_name: EUROAGENTES GESTION SGIIC, S.A.
        entity_expiration:
          date: '2018-04-17'
          reason: DISSOLVED
        successor:
          lei: CYZ5AAG3SVPY3KMG6Q07
          name: Specialplast Wensbo AB
    IbanElement:
      type: object
      required:
        - field_position
        - field_name
        - field_length
        - is_max_length
        - is_mandatory
      properties:
        field_position:
          type: number
          minimum: 1
          maximum: 34
          description: 1-based position of the element within an IBAN
          example: 3
        field_name:
          type: string
          pattern: '^[a-z0-9_]{1,64}$'
          description: Machine-friendly element identifier
          example: national_check_digit
        label_en:
          $ref: '#/components/schemas/StringMax255'
          # description: English name of the element
          # example: National check digit
        label_local:
          $ref: '#/components/schemas/StringMax255'
          # description: Local language name of the element
          # example: CIN
        field_length:
          type: number
          minimum: 1
          maximum: 30
          example: 1
        is_max_length:
          type: boolean
          description: If true, the element can be supplied shorter than how stated by field_length and it is left-padded with zeroes
          example: false
        is_mandatory:
          type: boolean
          description: If false, IBAN constructor can find its value
          example: false
      xml:
        name: element
      additionalProperties: false
      example:
        field_position: 5
        field_length: 12
        field_name: account_number
        label_en: Account number
        label_local: Numero di conto
        is_max_length: true
        is_mandatory: true
    BbanElementCombination:
      type: array
      minLength: 1
      items:
        $ref: '#/components/schemas/IbanElement'
      xml:
        name: elements
        wrapped: true
      example:
        - field_position: 3
          field_length: 1
          field_name: national_check_digit
          label_en: National check digit
          label_local: CIN
          is_max_length: false
          is_mandatory: false
        - field_position: 4
          field_length: 5
          field_name: bank_code
          label_en: Bank code
          label_local: ABI
          is_max_length: false
          is_mandatory: true
        - field_position: 5
          field_length: 5
          field_name: branch_code
          label_en: Branch code
          label_local: CAB
          is_max_length: false
          is_mandatory: true
        - field_position: 6
          field_length: 12
          field_name: account_number
          label_en: Account number
          label_local: Numero di conto
          is_max_length: true
          is_mandatory: true
    Iban:
      type: string
      minLength: 5
      maxLength: 34
      pattern: '^[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}$'
      description: IBAN (International Bank Account Number)
      example: IT60X0542811101000000123456
    Bic:
      type: string
      description: Bank Identifier Code - ISO 9362
      pattern: '^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$'
      example: SWHTBEBBXXX
    Lei:
      type: string
      description: Legal Entity Identifier - ISO 17442
      pattern: '^[0-9A-Z]{18}[0-9]{2}$'
      example: 7LTWFZYICNSX8D621K86
    CountryCode:
      type: string
      pattern: '^[a-zA-Z]{2}$'
      description: 2-character ISO 3166-1 country code
      example: DE
    CurrencyCode:
      type: string
      pattern: '^[a-zA-Z]{3}$'
      description: 3-character ISO 4217 currency code
      example: EUR
    SsiAssetCategory:
      type: string
      pattern: '^[a-zA-Z0-9]{4}$'
      description: Product area to which an SSI applies
      example: COPA
    PmiParticipant:
      type: object
      description: PMI participant general information
      required:
        - service_id
        - participant_id
        - links
      properties:
        service_id:
          $ref: '#/components/schemas/PmiServiceId'
        alternative_service_ids:
          type: array
          items:
            $ref: '#/components/schemas/PmiServiceId'
        participant_id:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
          # description: The unique identifier of the PMI participant, whose format is specific to the PMI. Not to be confused with participant record ID.
          # examples:
          #   - o=tdomcatt,o=swift
          #   - SWHQBEBBXXX
          #   - SWHQBEBB
          #   - 1234567890
        participant_name:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
          # description: Payment Market Infrastructure participant name
        country_code:
          # description: The 2-character ISO 3166-1 country code of a Payment Market Infrastructure
          $ref: '#/components/schemas/CountryCode'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          minItems: 1
      additionalProperties: false
    PmiParticipantDetails:
      type: object
      description: PMI participant details as reported within records of REACHPLUS flatfile
      required:
        - service_id
        - service_name
        - participant_id
      properties:
        service_id:
          $ref: '#/components/schemas/PmiServiceId'
        service_name:
          $ref: '#/components/schemas/StringMax105'
          # description: Service name of a Payment Market Infrastructure
          # example: SWIFTNet Bulk Payments Generic SnF
        participant_id:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
          # description: The unique identifier of the PMI participant, whose format is specific to the PMI. Not to be confused with participant record ID.
          # examples:
          #   - o=tdomcatt,o=swift
          #   - SWHQBEBBXXX
          #   - SWHQBEBB
          #   - 1234567890
        attribute_1:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_2:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_3:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_4:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_5:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_6:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_7:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_8:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_9:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_10:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_11:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_12:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_13:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_14:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_15:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_16:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_17:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_18:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_19:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        attribute_20:
          $ref: '#/components/schemas/ReachPlusGenericAttribute'
        activation_date:
          type: string
          format: date
          description: The date of activation of an added record, in case it is different from the monthly publication date
          example: '2021-07-23'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          minItems: 1
      xml:
        name: participant
      additionalProperties: false
      example:
        service_id: BULKP_RT
        service_name: SWIFTNet Bulk Payments Generic
        participant_id: ou=fileactlive,o=wfbius6s,o=swift
        attribute_2: WFBIUS6S
        attribute_3: WELLS FARGO BANK, N.A.
        attribute_4: swift.bulkp.generic.rt
        attribute_5: RT
        attribute_6: L
        attribute_7: FA
        attribute_8: bulkpuser
        links:
          - href: https://api.swift.com/swiftrefdata/v4/pmis/BULKP_RT/structure
            rel: describedby
            type: GET
    PmiServiceId:
      $ref: '#/components/schemas/StringMax20'
      # description: Identifier of a Payment Market Infrastructure
      # example: CN CNAPS
    PmiParticipantStructureItem:
      description: Description of each participant record field related to a Payment Market Infrastructure in the REACHPLUS file.
      type: object
      required:
        - platform
        - generic_field_name
        - always_present
      properties:
        platform:
          $ref: '#/components/schemas/StringMax20'
          # description: Acronym for the service platform that operates one or multiple services.
        generic_field_name:
          type: string
          enum:
            - platform
            - service_id
            - service_name
            - participant_id
            - attribute_1
            - attribute_2
            - attribute_3
            - attribute_4
            - attribute_5
            - attribute_6
            - attribute_7
            - attribute_8
            - attribute_9
            - attribute_10
            - attribute_11
            - attribute_12
            - attribute_13
            - attribute_14
            - attribute_15
            - attribute_16
            - attribute_17
            - attribute_18
            - attribute_19
            - attribute_20
            - activation_date
            - field_a
            - field_b
            - field_c
          description: Title of the data field in the REACHPLUS data file
          example: attribute_5
        specific_field_name:
          $ref: '#/components/schemas/StringMax255'
          # description: Platform-specific title of the data field in the REACHPLUS file.
        specific_field_description:
          type: string
          minLength: 1
          maxLength: 600
          description: Platform-specific meaning of the data field in the REACHPLUS file
          example: The SEPA scheme that the participant is able to process.
        specific_format:
          type: string
          minLength: 2
          maxLength: 8
          pattern: '^\d+(a|n|c|an)$'
          description: Platform-specific format of the data field in the REACHPLUS file
          example: 8c
        always_present:
          type: boolean
          description: The mandatory or optional presence of the data in the platform-specific data field in the REACHPLUS file
        allowed_values:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 128
          minItems: 1
          description: If the data in the platform-specific data field contains a fixed value or a range of fixed values for all records of the platform, then this field contains that fixed value (or the range of fixed values)
          example:
            - SCT
            - SCT INST
            - SDD B2B
            - SDD CORE
      additionalProperties: false
      example:
        platform: SEPA
        generic_field_name: attribute_5
        specific_field_name: SCHEME
        specific_field_description: The SEPA scheme that the participant is able to process.
        specific_format: 8c
        always_present: true
        allowed_values:
          - SCT
          - SCT INST
          - SDD B2B
          - SDD CORE
    OfficeType:
      type: string
      pattern: '^[A-Z0-9]{1,2}$'
      description: Status of the entity in the office hierarchy
      example: HO
      # Current possible values:
      #  - HO: Head Office
      #  - MP: Main Payments Office
      #  - DB: Domestic Branch/Department
      #  - SB: Sub-Domestic Branch/Department
      #  - FB: Foreign Branch
      #  - SF: Sub-Foreign Branch
      #  - UC: Unclassified
    IbanDetailsWithIsoFlag:
      type: object
      required:
        - iban
        - country_code
        - checksum
        - bank_id
        - account_number
        - length
        - is_iso
      properties:
        iban:
          $ref: '#/components/schemas/Iban'
          # description: The IBAN that was validated
        country_code:
          $ref: '#/components/schemas/CountryCode'
          # description: The ISO 3166-1 alpha-2 code of the country of the institution/branch.
        checksum:
          $ref: '#/components/schemas/TwoDigitCode'
          # description: The checksum extracted from the IBAN
        bank_id:
          $ref: '#/components/schemas/AlphaNumStringMax30'
          # description: The BANK ID extracted from the IBAN. Its structure (bank ID only or bank ID + branch ID) is as defined by the IBAN BIC LENGTH in the IBANSTRUCTURE file.
        branch_id:
          $ref: '#/components/schemas/AlphaNumStringMax30'
          # description: Unique and unambiguous identification of a branch of a financial institution.
        account_number:
          $ref: '#/components/schemas/AlphaNumStringMax30'
          # description: The remainder of the IBAN including the account number.
        length:
          type: integer
          minimum: 5
          maximum: 34
          description: The length of the IBAN
        is_iso:
          type: boolean
          description: Whether the IBAN format for the country has been officially registered with ISO (ISO 13616)
      xml:
        name: iban
      example:
        iban: DE04500700100532013000
        country_code: DE
        checksum: '04'
        bank_id: '50070010'
        account_number: '0532013000'
        length: 22
        is_iso: true
    BicIsoDetails:
      type: object
      required:
        - bic
        - name
        - structured_address
      properties:
        bic:
          $ref: '#/components/schemas/Bic'
          # description: The BIC of the institution on which more information is requested
        office_type:
          $ref: '#/components/schemas/OfficeType'
        name:
          $ref: '#/components/schemas/InstitutionName'
          # description: Name by which an institution is known and identified
        department:
          $ref: '#/components/schemas/InstitutionDepartment'
        sub_department:
          $ref: '#/components/schemas/InstitutionDepartment'
        unstructured_address:
          $ref: '#/components/schemas/UnstructuredAddress'
        structured_address:
          $ref: '#/components/schemas/StructuredAddress'
        swift_connectivity:
          $ref: '#/components/schemas/SwiftConnectivity'
          # description: BIC connectivity
        swift_services:
          type: array
          items:
            $ref: '#/components/schemas/SwiftService'
          xml:
            wrapped: true
          description: A list of 3-character codes and names of SWIFT FIN service codes (also called value added service codes)
        swift_type:
          $ref: '#/components/schemas/SwiftSubtypeIndicator'
        utc_offset:
          $ref: '#/components/schemas/TimeOffset'
      xml:
        name: bic
      example:
        bic: 'UBSWGB2LSBI'
        office_type: 'SF'
        name: 'UBS AG LONDON BRANCH'
        department: 'UBS WARBURG INTERNATIONAL LTD, FORMERLY SBCI INVESTMENT BANKING LTD'
        sub_department: 'BQCODES: BRA'
        unstructured_address:
          address_line_1: 'SWISS BANK HOUSE'
          address_line_2: '1 HIGH TIMBER STREET'
          address_line_3: 'LONDON, EC4V 3SB, GREATER LONDON GB'
        structured_address:
          street_name: 'HIGH TIMBER STREET'
          building_number: '1'
          building_name: 'SWISS BANK HOUSE'
          post_code: 'EC4V 3SB'
          town_name: 'LONDON'
          country_subdivision_name: 'GREATER LONDON'
          country_code: 'GB'
          country_name: 'UNITED KINGDOM'
        swift_connectivity:
          fin: true
          finplus:
            future: 'ou=sbi,o=ubswgb2l,o=swift'
            live: 'ou=sbi,o=ubswgb2l,o=swift'
            pilot: 'ou=sbi,o=ubswgb2l,o=swift'
          interact: false
          fileact: false
        swift_services:
          - code: 'FIN'
            name: 'Many-to-many FIN payment service'
        utc_offset: "±00:00"
    IbanValidity:
      type: object
      required:
        - iban
        - validity
      properties:
        iban:
          $ref: '#/components/schemas/Iban'
        validity:
          type: string
          enum:
            - IVAL
          description: The code IVAL if the IBAN is valid
      xml:
        name: validity
      additionalProperties: false
      example:
        iban: IT60X0542811101000000123456
        validity: IVAL
    IbanBic:
      type: object
      required:
        - bic
      properties:
        bic:
          $ref: '#/components/schemas/Bic'
          # description: The BIC associated with the IBAN
      xml:
        name: bic
      additionalProperties: false
      example:
        bic: DEUTDEFFXXX
    IbanBuilt:
      type: object
      required:
        - iban
      properties:
        iban:
          $ref: '#/components/schemas/Iban'
      xml:
        name: iban
      additionalProperties: false
      example:
        iban: IT60X0542811101000000123456
    IbanNationalIdBic:
      type: object
      required:
        - bic
      properties:
        bic:
          $ref: '#/components/schemas/Bic'
          # description: The BIC associated with the IBAN national ID
      xml:
        name: bic
      additionalProperties: false
      example:
        bic: DEUTDEFFXXX
    IbanOfBban:
      type: object
      required:
        - iban
      properties:
        iban:
          $ref: '#/components/schemas/Iban'
          # description: The corresponding IBAN
      xml:
        name: iban
      additionalProperties: false
      example:
        iban: DE04500700100532013000
    BbanElements:
      type: object
      required:
        - elements
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/BbanElementCombination'
      xml:
        name: bban
      example:
        elements:
          - - field_position: 3
              field_length: 23
              field_name: bban
              label_en: Bank code and account number
              label_local: Numero di conto
              is_max_length: false
              is_mandatory: true
          - - field_position: 3
              field_length: 1
              field_name: checksum
              label_en: National checksum
              label_local: CIN
              is_max_length: false
              is_mandatory: false
            - field_position: 4
              field_length: 5
              field_name: bank_code
              label_en: Bank code
              label_local: ABI
              is_max_length: false
              is_mandatory: true
            - field_position: 5
              field_length: 5
              field_name: branch_code
              label_en: Branch code
              label_local: CAB
              is_max_length: false
              is_mandatory: true
            - field_position: 6
              field_length: 12
              field_name: account
              label_en: Account number
              label_local: Numero di conto corrente
              is_max_length: true
              is_mandatory: true
    BicValidity:
      type: object
      required:
        - bic
        - validity
        - effective_date
      properties:
        bic:
          $ref: '#/components/schemas/Bic'
          # description: The BIC that was validated
        validity:
          type: string
          enum:
            - VBIC
          description: The code VBIC if the BIC is valid
        effective_date:
          type: string
          pattern: '^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]Z$'
          description: A date in YYYY-MM-DD format to indicate explicitly on which date the BIC is confirmed to be valid; the timezone is always UTC, hence the "Z" suffix will always be present, in compliance with ISO 8601 / RFC 3339
      xml:
        name: validity
      additionalProperties: false
      example:
        bic: DEUTDEFFXXX
        validity: VBIC
        effective_date: '2019-07-23Z'
    LeiFound:
      type: object
      required:
        - lei
      properties:
        lei:
          $ref: '#/components/schemas/Lei'
          # description: The corresponding LEI for a given BIC
      xml:
        name: lei
      additionalProperties: false
      example:
        lei: 7LTWFZYICNSX8D621K86
    NationalIdsFound:
      type: object
      required:
        - national_ids
      properties:
        national_ids:
          type: array
          items:
            $ref: '#/components/schemas/NationalId'
      xml:
        name: national_ids
      additionalProperties: false
      example:
        national_ids:
          - id: '50070010'
            id_type: 'DE-BLZ8'
            national_id_type: BLZ
            iso_clc_type: DEBLZ
    BicReachabilityFound:
      type: object
      required:
        - payment_channels
      properties:
        payment_channels:
          type: array
          items:
            $ref: '#/components/schemas/SepaPaymentChannel'
          description: SEPA CSM through which the BIC is reachable for the supplied SEPA scheme
        adherence_bic:
          $ref: '#/components/schemas/Bic'
          # description: Adherence BIC11 of the reachable BIC
      xml:
        name: reachability
      additionalProperties: false
      example:
        payment_channels:
          - id: EBAS
            member_type: DRCT
    SsisFound:
      type: object
      required:
        - ssis
      properties:
        ssis:
          type: array
          items:
            $ref: '#/components/schemas/Ssi'
          minItems: 1
      xml:
        name: ssis
      additionalProperties: false
    ConnectedBicFound:
      type: object
      required:
        - connected_bic
      properties:
        connected_bic:
          $ref: '#/components/schemas/Bic'
      xml:
        name: connected_bic
      additionalProperties: false
      example:
        connected_bic: WELADEDDXXX
    LeiBic:
      type: object
      required:
        - bic
      properties:
        bic:
          $ref: '#/components/schemas/Bic'
          # description: The corresponding BIC for a given LEI
      xml:
        name: bic
      additionalProperties: false
      example:
        bic: DEUTDEFFXXX
    LeiValidity:
      type: object
      required:
        - lei
        - validity
      properties:
        lei:
          $ref: '#/components/schemas/Lei'
          # description: The LEI that was validated
        validity:
          type: string
          enum:
            - VLEI
          description: The code VLEI if the LEI is valid
      xml:
        name: validity
      additionalProperties: false
      example:
        lei: BFXS5XCH7N0Y05NIXW11
        validity: VLEI
    NationalIdDetailsFound:
      type: object
      required:
        - national_ids
      properties:
        national_ids:
          type: array
          items:
            $ref: '#/components/schemas/NationalIdDetails'
      xml:
        name: national_ids
      additionalProperties: false
      example:
        national_ids:
          - national_id: '043000300'
            id_type: 'AS-ABA9'
            national_id_type: 'ABA'
            iso_clc_type: 'USABA'
            office_type: 'DB'
            name: 'Federal Reserve Bank of Cleveland'
            department: 'Pittsburgh'
            unstructured_address:
              address_line_1: 'ONE OXFORD CTR'
              address_line_2: '301 GRANT ST, STE 3000'
              address_line_3: 'PITTSBURGH PA 15219, US'
            structured_address:
              street_name: 'GRANT ST'
              building_number: '301'
              building_name: 'ONE OXFORD CTR'
              post_box: 'PO BOX 867'
              room: 'STE 3000'
              post_code: '15219'
              town_name: 'PITTSBURGH'
              country_subdivision_name: 'PENNSYLVANIA'
              country_subdivision_code: 'PA'
              country_code: 'US'
              country_name: 'UNITED STATES OF AMERICA'
            utc_offset: "-05:00"
    ValidNationalIdWithValidityFlag:
      description: Valid National ID with a flag stating it really is.
      type: object
      required:
        - national_id
        - validity
      properties:
        national_id:
          $ref: '#/components/schemas/NationalIdCode'
          # description: The National ID that was validated
        id_type:
          $ref: '#/components/schemas/BankNationalIdScheme'
        national_id_type:
          $ref: '#/components/schemas/BdpNationalIdScheme'
        iso_clc_type:
          $ref: '#/components/schemas/Iso5NationalIdScheme'
        validity:
          type: string
          enum:
            - valid
          description: Contains the value "valid" if the National ID is valid in the provided scheme or country
      xml:
        name: validity
      additionalProperties: false
      example:
        national_id: '50070010'
        id_type: 'DE-BLZ8'
        national_id_type: BLZ
        iso_clc_type: DEBLZ
        validity: valid
    BicsFound:
      type: object
      required:
        - bics
      properties:
        bics:
          type: array
          items:
            $ref: '#/components/schemas/Bic'
          description: An array of the corresponding BICs
      xml:
        name: bics
      additionalProperties: false
      example:
        bics:
          - DEUTDEFFXXX
    CountryCodeValidity:
      type: object
      required:
        - country_code
        - validity
      properties:
        country_code:
          oneOf:
            - $ref: '#/components/schemas/TwoLetterCode'
            - $ref: '#/components/schemas/ThreeLetterCode'
            - $ref: '#/components/schemas/ThreeDigitCode'
          description: The country code that was validated
        validity:
          type: string
          enum:
            - VCOC
          description: The code VCOC if the country code is valid
      xml:
        name: validity
      additionalProperties: false
      example:
        country_code: IT
        validity: VCOC
    CurrencyCodeValidity:
      type: object
      required:
        - currency_code
        - validity
      properties:
        currency_code:
          oneOf:
            - $ref: '#/components/schemas/ThreeLetterCode'
            - $ref: '#/components/schemas/ThreeDigitCode'
          description: The currency code that was validated
        validity:
          type: string
          enum:
            - VCUC
          description: The code VCUC if the currency code is valid
      xml:
        name: validity
      additionalProperties: false
      example:
        currency_code: EUR
        validity: VCUC
    CurrencyAmountValidity:
      type: object
      required:
        - amount
        - currency_code
        - validity
      properties:
        amount:
          type: string
          pattern: '^[0-9]*,[0-9]*$'
          description: The amount that was validated
        currency_code:
          oneOf:
            - $ref: '#/components/schemas/ThreeLetterCode'
            - $ref: '#/components/schemas/ThreeDigitCode'
          description: The currency code of the amount that was validated
        validity:
          type: string
          enum:
            - VAMT
          description: The code VAMT if the amount is valid
      xml:
        name: amount_validity
      additionalProperties: false
      example:
        amount: '12,34'
        currency_code: EUR
        validity: VAMT
    AccountNumberValidity:
      type: object
      required:
        - account_number
        - validity
      properties:
        account_number:
          $ref: '#/components/schemas/FullAccountNumber'
          # description: The account number that was validated
        validity:
          type: string
          enum:
            - AVAL
          description: The code AVAL if the account number is valid
      xml:
        name: validity
      additionalProperties: false
      example:
        account_number: X0542811101000000123456
        validity: AVAL
    PmiParticipants:
      type: object
      required:
        - data
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PmiParticipant'
          minItems: 1
          maxItems: 1000
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          minItems: 1
          maxItems: 5
      xml:
        name: participants
      example:
        data:
          - participant_id: '021582837'
            participant_name: COOPERATIVA DE A Y C DE LA AAA
            country_code: US
            service_id: US FEDACH
            links:
              - href: https://api.swift.com/swiftrefdata/v4/pmis/participants/3061208
                rel: self
                type: GET
          - participant_id: '271291648'
            participant_name: AAA FEDERAL CREDIT UNION
            country_code: US
            service_id: US FEDACH
            links:
              - href: https://api.swift.com/swiftrefdata/v4/pmis/participants/3073811
                rel: self
                type: GET
        links:
          - href: https://api.swift.com/swiftrefdata/v4/pmis/participants?limit=10&participant_name_substring=aaa&offset=0
            rel: first
            type: GET
          - href: https://api.swift.com/swiftrefdata/v4/pmis/participants?limit=10&participant_name_substring=aaa&offset=0
            rel: last
            type: GET
          - href: https://api.swift.com/swiftrefdata/v4/pmis/participants?limit=10&participant_name_substring=aaa&offset=0
            rel: self
            type: GET
    PmiParticipantStructure:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PmiParticipantStructureItem'
          minItems: 1
      xml:
        name: structure
    PmiDetails:
      type: object
      description: Details of a Payment Market Infrastructure
      required:
        - service_id
        - service_name
      properties:
        service_id:
          type: string
          description: The acronym of the clearing and settlement service, or the SWIFTNet service. It is usually prefixed with the ISO country code or the AREA code, which represents the land/area where the service is offered.
          maxLength: 20
          example: CN CNAPS
        alternative_service_ids:
          type: array
          items:
            type: string
            maxLength: 20
          description: The list of the various alternative IDs. The prefix and the alternative ID are separated by ":".
          example:
            - ISO5:CNAPS
            - ISO2:CN
        service_name:
          type: string
          description: The name of the Payment Market Infrastructure.
          maxLength: 105
          example: China National Advanced Payments System
        currency_codes:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyCode'
          description: The list of currency codes cleared or settled on the service. Required only for platforms other than SwiftNET.
          example:
            - CNY
        service_type:
          type: string
          description: If applicable, a comma-separated combination of ACH (automated clearing house), CHQ (cheque clearing system), RTGS (real-time gross settlement), RT-RPS (real-time retail payments service). Other services that are not in these categories have this field empty.
          maxLength: 50
          example: 'ACH,RT-RPS'
        areas:
          type: array
          items:
            type: string
            maxLength: 2
          description: A list of one or several countries, at times defining an official group of countries in which the service is made available.
          example:
            - CN
        coverage:
          type: string
          enum:
            - domestic
            - regional
            - international
          description: The reach/coverage the service provides.
          example: domestic
        high_low_value:
          type: string
          enum:
            - HV
            - LV
            - HV/LV
          description: The value of the transactions, one of HV (high value), LV (low value), HV/LV (high and low value).
          example: HV
        gross_net_settlement:
          type: string
          enum:
            - GS
            - NS
          description: The type of settlement, one of GS (gross settlement, each transaction is settled individually), NS (net settlement, the transactions are aggregated and settled in batch as net differences in amounts).
          example: GS
        execution_delay:
          type: string
          enum:
            - RT
            - 1H
            - 2H
            - 3H
            - 4H
            - 5H
            - 6H
            - 7H
            - 8H
            - 9H
            - SD
            - DF
          description: The maximum period necessary to execute the transaction, one of RT (real-time or instant), nH (a number of hours, for example 2H), SD (same day), DF (deferred, can take one or several days)
          example: RT
        transaction_types:
          type: array
          items:
            type: string
            maxLength: 2
          description: The types of transaction. A list of one or several of CQ (cheque transfer), CT (credit transfer), DT (debit transfer), DD (direct debit), IB (inter-bank transfer). Additional types may be added in the future.
          example:
            - IB
            - CT
        participant_id_type:
          type: string
          description: The type of identifier of the participant of the service. In most cases, it will either be a SWIFT BIC or a domestic routing/clearing number (with or without the branch code). These have a dedicated name in the related Bank Directory Plus file called the NATIONAL ID TYPE.
          maxLength: 50
          example: CNAPS
        iso_message_formats:
          type: array
          items:
            type: string
            maxLength: 50
          description: The comma-separated list of the ISO standards ID(s) for the type of messages used by the service, e.g. ISO15022 (as used in the FIN MTs), ISO20022, ISO8583.
          example:
            - ISO15022, ISO20022
        service_local_start_time:
          type: string
          pattern: '^\d\d:\d\d[\+\-]\d\d:\d\d$'
          description: The local time + UTC offset of the start of the daily operations of the service. This time is not adapted for Daylight Saving Time (DST).
          example: '08:30+08:00'
        service_local_cut_off_time:
          type: string
          pattern: '^\d\d:\d\d[\+\-]\d\d:\d\d$'
          description: The local time + UTC offset of the acceptance of the last transaction by the service. This time is not adapted for Daylight Saving Time (DST).
          example: '17:00+08:00'
        operating_days:
          type: string
          pattern: '^(SUN|MON|TUE|WED|THU|FRI|SAT)-(SUN|MON|TUE|WED|THU|FRI|SAT)$'
          description: A range of days (in acronyms) during which the service is operational.
          example: 'MON-FRI'
        cut_off_amount:
          type: string
          description: The maximum amount allowed in an ACH or RT-RPS-RPS (low value) and/or the minimum amount allowed in an RTGS (high value) service, with syntax min/max <amount> <currency>.
          maxLength: 255
          example: BEPS max CNY 50000, HVPS min CNY 50000
      additionalProperties: false
      xml:
        name: pmi
      example:
        service_name: China National Advanced Payments System
        alternative_service_ids:
          - 'ISO5:CNAPS'
          - 'ISO2:CN'
        currency_codes:
          - CNY
        service_type: RTGS
        areas:
          - CN
        coverage: domestic
        high_low_value: HV
        gross_net_settlement: GS
        execution_delay: RT
        transaction_types:
          - IB
          - CT
        participant_id_type: CNAPS
        iso_message_formats:
          - ISO20022
        service_local_start_time: '08:30+08:00'
        service_local_cut_off_time: '17:00+08:00'
        operating_days: 'MON-FRI'
        cut_off_amount: BEPS max CNY 50000, HVPS min CNY 50000
        service_id: CN CNAPS
    Pmis:
      type: object
      required:
        - pmis
      properties:
        pmis:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PmiDetails'
      xml:
        name: pmis